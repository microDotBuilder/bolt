{
  "version": 3,
  "sources": ["../../.pnpm/isomorphic-git@1.29.0/node_modules/isomorphic-git/http/web/index.js"],
  "sourcesContent": ["/**\n * @typedef {Object} GitProgressEvent\n * @property {string} phase\n * @property {number} loaded\n * @property {number} total\n */\n\n/**\n * @callback ProgressCallback\n * @param {GitProgressEvent} progress\n * @returns {void | Promise<void>}\n */\n\n/**\n * @typedef {Object} GitHttpRequest\n * @property {string} url - The URL to request\n * @property {string} [method='GET'] - The HTTP method to use\n * @property {Object<string, string>} [headers={}] - Headers to include in the HTTP request\n * @property {Object} [agent] - An HTTP or HTTPS agent that manages connections for the HTTP client (Node.js only)\n * @property {AsyncIterableIterator<Uint8Array>} [body] - An async iterator of Uint8Arrays that make up the body of POST requests\n * @property {ProgressCallback} [onProgress] - Reserved for future use (emitting `GitProgressEvent`s)\n * @property {object} [signal] - Reserved for future use (canceling a request)\n */\n\n/**\n * @typedef {Object} GitHttpResponse\n * @property {string} url - The final URL that was fetched after any redirects\n * @property {string} [method] - The HTTP method that was used\n * @property {Object<string, string>} [headers] - HTTP response headers\n * @property {AsyncIterableIterator<Uint8Array>} [body] - An async iterator of Uint8Arrays that make up the body of the response\n * @property {number} statusCode - The HTTP status code\n * @property {string} statusMessage - The HTTP status message\n */\n\n/**\n * @callback HttpFetch\n * @param {GitHttpRequest} request\n * @returns {Promise<GitHttpResponse>}\n */\n\n/**\n * @typedef {Object} HttpClient\n * @property {HttpFetch} request\n */\n\n// Convert a value to an Async Iterator\n// This will be easier with async generator functions.\nfunction fromValue(value) {\n  let queue = [value];\n  return {\n    next() {\n      return Promise.resolve({ done: queue.length === 0, value: queue.pop() })\n    },\n    return() {\n      queue = [];\n      return {}\n    },\n    [Symbol.asyncIterator]() {\n      return this\n    },\n  }\n}\n\nfunction getIterator(iterable) {\n  if (iterable[Symbol.asyncIterator]) {\n    return iterable[Symbol.asyncIterator]()\n  }\n  if (iterable[Symbol.iterator]) {\n    return iterable[Symbol.iterator]()\n  }\n  if (iterable.next) {\n    return iterable\n  }\n  return fromValue(iterable)\n}\n\n// Currently 'for await' upsets my linters.\nasync function forAwait(iterable, cb) {\n  const iter = getIterator(iterable);\n  while (true) {\n    const { value, done } = await iter.next();\n    if (value) await cb(value);\n    if (done) break\n  }\n  if (iter.return) iter.return();\n}\n\nasync function collect(iterable) {\n  let size = 0;\n  const buffers = [];\n  // This will be easier once `for await ... of` loops are available.\n  await forAwait(iterable, value => {\n    buffers.push(value);\n    size += value.byteLength;\n  });\n  const result = new Uint8Array(size);\n  let nextIndex = 0;\n  for (const buffer of buffers) {\n    result.set(buffer, nextIndex);\n    nextIndex += buffer.byteLength;\n  }\n  return result\n}\n\n// Convert a web ReadableStream (not Node stream!) to an Async Iterator\n// adapted from https://jakearchibald.com/2017/async-iterators-and-generators/\nfunction fromStream(stream) {\n  // Use native async iteration if it's available.\n  if (stream[Symbol.asyncIterator]) return stream\n  const reader = stream.getReader();\n  return {\n    next() {\n      return reader.read()\n    },\n    return() {\n      reader.releaseLock();\n      return {}\n    },\n    [Symbol.asyncIterator]() {\n      return this\n    },\n  }\n}\n\n/* eslint-env browser */\n\n/**\n * HttpClient\n *\n * @param {GitHttpRequest} request\n * @returns {Promise<GitHttpResponse>}\n */\nasync function request({\n  onProgress,\n  url,\n  method = 'GET',\n  headers = {},\n  body,\n}) {\n  // streaming uploads aren't possible yet in the browser\n  if (body) {\n    body = await collect(body);\n  }\n  const res = await fetch(url, { method, headers, body });\n  const iter =\n    res.body && res.body.getReader\n      ? fromStream(res.body)\n      : [new Uint8Array(await res.arrayBuffer())];\n  // convert Header object to ordinary JSON\n  headers = {};\n  for (const [key, value] of res.headers.entries()) {\n    headers[key] = value;\n  }\n  return {\n    url: res.url,\n    method: res.method,\n    statusCode: res.status,\n    statusMessage: res.statusText,\n    body: iter,\n    headers: headers,\n  }\n}\n\nvar index = { request };\n\nexport default index;\nexport { request };\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AA+CA,SAAS,UAAU,OAAO;AACxB,MAAI,QAAQ,CAAC,KAAK;AAClB,SAAO;AAAA,IACL,OAAO;AACL,aAAO,QAAQ,QAAQ,EAAE,MAAM,MAAM,WAAW,GAAG,OAAO,MAAM,IAAI,EAAE,CAAC;AAAA,IACzE;AAAA,IACA,SAAS;AACP,cAAQ,CAAC;AACT,aAAO,CAAC;AAAA,IACV;AAAA,IACA,CAAC,OAAO,aAAa,IAAI;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAEA,SAAS,YAAY,UAAU;AAC7B,MAAI,SAAS,OAAO,aAAa,GAAG;AAClC,WAAO,SAAS,OAAO,aAAa,EAAE;AAAA,EACxC;AACA,MAAI,SAAS,OAAO,QAAQ,GAAG;AAC7B,WAAO,SAAS,OAAO,QAAQ,EAAE;AAAA,EACnC;AACA,MAAI,SAAS,MAAM;AACjB,WAAO;AAAA,EACT;AACA,SAAO,UAAU,QAAQ;AAC3B;AAGA,eAAe,SAAS,UAAU,IAAI;AACpC,QAAM,OAAO,YAAY,QAAQ;AACjC,SAAO,MAAM;AACX,UAAM,EAAE,OAAO,KAAK,IAAI,MAAM,KAAK,KAAK;AACxC,QAAI,MAAO,OAAM,GAAG,KAAK;AACzB,QAAI,KAAM;AAAA,EACZ;AACA,MAAI,KAAK,OAAQ,MAAK,OAAO;AAC/B;AAEA,eAAe,QAAQ,UAAU;AAC/B,MAAI,OAAO;AACX,QAAM,UAAU,CAAC;AAEjB,QAAM,SAAS,UAAU,WAAS;AAChC,YAAQ,KAAK,KAAK;AAClB,YAAQ,MAAM;AAAA,EAChB,CAAC;AACD,QAAM,SAAS,IAAI,WAAW,IAAI;AAClC,MAAI,YAAY;AAChB,aAAW,UAAU,SAAS;AAC5B,WAAO,IAAI,QAAQ,SAAS;AAC5B,iBAAa,OAAO;AAAA,EACtB;AACA,SAAO;AACT;AAIA,SAAS,WAAW,QAAQ;AAE1B,MAAI,OAAO,OAAO,aAAa,EAAG,QAAO;AACzC,QAAM,SAAS,OAAO,UAAU;AAChC,SAAO;AAAA,IACL,OAAO;AACL,aAAO,OAAO,KAAK;AAAA,IACrB;AAAA,IACA,SAAS;AACP,aAAO,YAAY;AACnB,aAAO,CAAC;AAAA,IACV;AAAA,IACA,CAAC,OAAO,aAAa,IAAI;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAUA,eAAe,QAAQ;AAAA,EACrB;AAAA,EACA;AAAA,EACA,SAAS;AAAA,EACT,UAAU,CAAC;AAAA,EACX;AACF,GAAG;AAED,MAAI,MAAM;AACR,WAAO,MAAM,QAAQ,IAAI;AAAA,EAC3B;AACA,QAAM,MAAM,MAAM,MAAM,KAAK,EAAE,QAAQ,SAAS,KAAK,CAAC;AACtD,QAAM,OACJ,IAAI,QAAQ,IAAI,KAAK,YACjB,WAAW,IAAI,IAAI,IACnB,CAAC,IAAI,WAAW,MAAM,IAAI,YAAY,CAAC,CAAC;AAE9C,YAAU,CAAC;AACX,aAAW,CAAC,KAAK,KAAK,KAAK,IAAI,QAAQ,QAAQ,GAAG;AAChD,YAAQ,GAAG,IAAI;AAAA,EACjB;AACA,SAAO;AAAA,IACL,KAAK,IAAI;AAAA,IACT,QAAQ,IAAI;AAAA,IACZ,YAAY,IAAI;AAAA,IAChB,eAAe,IAAI;AAAA,IACnB,MAAM;AAAA,IACN;AAAA,EACF;AACF;AAEA,IAAI,QAAQ,EAAE,QAAQ;AAEtB,IAAO,cAAQ;",
  "names": ["import_dist"]
}
