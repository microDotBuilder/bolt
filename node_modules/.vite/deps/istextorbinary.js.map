{
  "version": 3,
  "sources": ["../../.pnpm/istextorbinary@9.5.0/node_modules/istextorbinary/edition-browsers/index.js", "../../.pnpm/textextensions@6.11.0/node_modules/textextensions/edition-browsers/index.js", "../../.pnpm/binaryextensions@6.11.0/node_modules/binaryextensions/edition-browsers/index.js"],
  "sourcesContent": ["/* eslint no-use-before-define:0 */\nimport * as pathUtil from 'path';\nimport textExtensions from 'textextensions';\nimport binaryExtensions from 'binaryextensions';\n/**\n * Determine if the filename and/or buffer is text.\n * Determined by extension checks first (if filename is available), otherwise if unknown extension or no filename, will perform a slower buffer encoding detection.\n * This order is done, as extension checks are quicker, and also because encoding checks cannot guarantee accuracy for chars between utf8 and utf16.\n * The extension checks are performed using the resources https://github.com/bevry/textextensions and https://github.com/bevry/binaryextensions\n * @param filename The filename for the file/buffer if available\n * @param buffer The buffer for the file if available\n * @returns Will be `null` if neither `filename` nor `buffer` were provided. Otherwise will be a boolean value with the detection result.\n */\nexport function isText(filename, buffer) {\n    // Test extensions\n    if (filename) {\n        // Extract filename\n        const parts = pathUtil.basename(filename).split('.').reverse();\n        // Cycle extensions\n        for (const extension of parts) {\n            if (textExtensions.indexOf(extension) !== -1) {\n                return true;\n            }\n            if (binaryExtensions.indexOf(extension) !== -1) {\n                return false;\n            }\n        }\n    }\n    // Fallback to encoding if extension check was not enough\n    if (buffer) {\n        return getEncoding(buffer) === 'utf8';\n    }\n    // No buffer was provided\n    return null;\n}\n/**\n * Determine if the filename and/or buffer is binary.\n * Determined by extension checks first (if filename is available), otherwise if unknown extension or no filename, will perform a slower buffer encoding detection.\n * This order is done, as extension checks are quicker, and also because encoding checks cannot guarantee accuracy for chars between utf8 and utf16.\n * The extension checks are performed using the resources https://github.com/bevry/textextensions and https://github.com/bevry/binaryextensions\n * @param filename The filename for the file/buffer if available\n * @param buffer The buffer for the file if available\n * @returns Will be `null` if neither `filename` nor `buffer` were provided. Otherwise will be a boolean value with the detection result.\n */\nexport function isBinary(filename, buffer) {\n    const text = isText(filename, buffer);\n    if (text == null)\n        return null;\n    return !text;\n}\n/**\n * Get the encoding of a buffer.\n * Checks the start, middle, and end of the buffer for characters that are unrecognized within UTF8 encoding.\n * History has shown that inspection at all three locations is necessary.\n * @returns Will be `null` if `buffer` was not provided. Otherwise will be either `'utf8'` or `'binary'`\n */\nexport function getEncoding(buffer, opts) {\n    // Check\n    if (!buffer)\n        return null;\n    // Prepare\n    const textEncoding = 'utf8';\n    const binaryEncoding = 'binary';\n    const chunkLength = opts?.chunkLength ?? 24;\n    let chunkBegin = opts?.chunkBegin ?? 0;\n    // Discover\n    if (opts?.chunkBegin == null) {\n        // Start\n        let encoding = getEncoding(buffer, { chunkLength, chunkBegin });\n        if (encoding === textEncoding) {\n            // Middle\n            chunkBegin = Math.max(0, Math.floor(buffer.length / 2) - chunkLength);\n            encoding = getEncoding(buffer, {\n                chunkLength,\n                chunkBegin,\n            });\n            if (encoding === textEncoding) {\n                // End\n                chunkBegin = Math.max(0, buffer.length - chunkLength);\n                encoding = getEncoding(buffer, {\n                    chunkLength,\n                    chunkBegin,\n                });\n            }\n        }\n        // Return\n        return encoding;\n    }\n    else {\n        // Extract\n        chunkBegin = getChunkBegin(buffer, chunkBegin);\n        if (chunkBegin === -1) {\n            return binaryEncoding;\n        }\n        const chunkEnd = getChunkEnd(buffer, Math.min(buffer.length, chunkBegin + chunkLength));\n        if (chunkEnd > buffer.length) {\n            return binaryEncoding;\n        }\n        const contentChunkUTF8 = buffer.toString(textEncoding, chunkBegin, chunkEnd);\n        // Detect encoding\n        for (let i = 0; i < contentChunkUTF8.length; ++i) {\n            const charCode = contentChunkUTF8.charCodeAt(i);\n            if (charCode === 65533 || charCode <= 8) {\n                // 8 and below are control characters (e.g. backspace, null, eof, etc.)\n                // 65533 is the unknown character\n                // console.log(charCode, contentChunkUTF8[i])\n                return binaryEncoding;\n            }\n        }\n        // Return\n        return textEncoding;\n    }\n}\n// ====================================\n// The functions below are created to handle multibyte utf8 characters.\n// To understand how the encoding works, check this article: https://en.wikipedia.org/wiki/UTF-8#Encoding\n// @todo add documentation for these\nfunction getChunkBegin(buf, chunkBegin) {\n    // If it's the beginning, just return.\n    if (chunkBegin === 0) {\n        return 0;\n    }\n    if (!isLaterByteOfUtf8(buf[chunkBegin])) {\n        return chunkBegin;\n    }\n    let begin = chunkBegin - 3;\n    if (begin >= 0) {\n        if (isFirstByteOf4ByteChar(buf[begin])) {\n            return begin;\n        }\n    }\n    begin = chunkBegin - 2;\n    if (begin >= 0) {\n        if (isFirstByteOf4ByteChar(buf[begin]) ||\n            isFirstByteOf3ByteChar(buf[begin])) {\n            return begin;\n        }\n    }\n    begin = chunkBegin - 1;\n    if (begin >= 0) {\n        // Is it a 4-byte, 3-byte utf8 character?\n        if (isFirstByteOf4ByteChar(buf[begin]) ||\n            isFirstByteOf3ByteChar(buf[begin]) ||\n            isFirstByteOf2ByteChar(buf[begin])) {\n            return begin;\n        }\n    }\n    return -1;\n}\nfunction getChunkEnd(buf, chunkEnd) {\n    // If it's the end, just return.\n    if (chunkEnd === buf.length) {\n        return chunkEnd;\n    }\n    let index = chunkEnd - 3;\n    if (index >= 0) {\n        if (isFirstByteOf4ByteChar(buf[index])) {\n            return chunkEnd + 1;\n        }\n    }\n    index = chunkEnd - 2;\n    if (index >= 0) {\n        if (isFirstByteOf4ByteChar(buf[index])) {\n            return chunkEnd + 2;\n        }\n        if (isFirstByteOf3ByteChar(buf[index])) {\n            return chunkEnd + 1;\n        }\n    }\n    index = chunkEnd - 1;\n    if (index >= 0) {\n        if (isFirstByteOf4ByteChar(buf[index])) {\n            return chunkEnd + 3;\n        }\n        if (isFirstByteOf3ByteChar(buf[index])) {\n            return chunkEnd + 2;\n        }\n        if (isFirstByteOf2ByteChar(buf[index])) {\n            return chunkEnd + 1;\n        }\n    }\n    return chunkEnd;\n}\nfunction isFirstByteOf4ByteChar(byte) {\n    // eslint-disable-next-line no-bitwise\n    return byte >> 3 === 30; // 11110xxx?\n}\nfunction isFirstByteOf3ByteChar(byte) {\n    // eslint-disable-next-line no-bitwise\n    return byte >> 4 === 14; // 1110xxxx?\n}\nfunction isFirstByteOf2ByteChar(byte) {\n    // eslint-disable-next-line no-bitwise\n    return byte >> 5 === 6; // 110xxxxx?\n}\nfunction isLaterByteOfUtf8(byte) {\n    // eslint-disable-next-line no-bitwise\n    return byte >> 6 === 2; // 10xxxxxx?\n}\n", "/** List of text file extensions */\nconst list = [\n    'Dockerfile',\n    'Makefile',\n    'Rakefile',\n    'ada',\n    'adb',\n    'ads',\n    'applescript',\n    'as',\n    'ascx',\n    'asm',\n    'asmx',\n    'asp',\n    'aspx',\n    'atom',\n    'bas',\n    'bash',\n    'bashrc',\n    'bat',\n    'bbcolors',\n    'bdsgroup',\n    'bdsproj',\n    'bib',\n    'bowerrc',\n    'c',\n    'cbl',\n    'cc',\n    'cfc',\n    'cfg',\n    'cfm',\n    'cfml',\n    'cgi',\n    'clj',\n    'cls',\n    'cmake',\n    'cmd',\n    'cnf',\n    'cob',\n    'coffee',\n    'coffeekup',\n    'conf',\n    'cpp',\n    'cpt',\n    'cpy',\n    'crt',\n    'cs',\n    'csh',\n    'cson',\n    'csr',\n    'css',\n    'csslintrc',\n    'csv',\n    'ctl',\n    'curlrc',\n    'cxx',\n    'dart',\n    'dfm',\n    'diff',\n    'dockerignore',\n    'dof',\n    'dpk',\n    'dproj',\n    'dtd',\n    'eco',\n    'editorconfig',\n    'ejs',\n    'el',\n    'emacs',\n    'eml',\n    'ent',\n    'erb',\n    'erl',\n    'eslintignore',\n    'eslintrc',\n    'ex',\n    'exs',\n    'f',\n    'f03',\n    'f77',\n    'f90',\n    'f95',\n    'fish',\n    'for',\n    'fpp',\n    'frm',\n    'ftn',\n    'gemrc',\n    'gitattributes',\n    'gitconfig',\n    'gitignore',\n    'gitkeep',\n    'gitmodules',\n    'go',\n    'gpp',\n    'gradle',\n    'groovy',\n    'groupproj',\n    'grunit',\n    'gtmpl',\n    'gvimrc',\n    'h',\n    'haml',\n    'hbs',\n    'hgignore',\n    'hh',\n    'hpp',\n    'hrl',\n    'hs',\n    'hta',\n    'htaccess',\n    'htc',\n    'htm',\n    'html',\n    'htpasswd',\n    'hxx',\n    'iced',\n    'inc',\n    'ini',\n    'ino',\n    'int',\n    'irbrc',\n    'itcl',\n    'itermcolors',\n    'itk',\n    'jade',\n    'java',\n    'jhtm',\n    'jhtml',\n    'js',\n    'jscsrc',\n    'jshintignore',\n    'jshintrc',\n    'json',\n    'json5',\n    'jsonld',\n    'jsp',\n    'jspx',\n    'jsx',\n    'ksh',\n    'less',\n    'lhs',\n    'lisp',\n    'log',\n    'ls',\n    'lsp',\n    'lua',\n    'm',\n    'mak',\n    'map',\n    'markdown',\n    'master',\n    'md',\n    'mdown',\n    'mdwn',\n    'mdx',\n    'metadata',\n    'mht',\n    'mhtml',\n    'mjs',\n    'mk',\n    'mkd',\n    'mkdn',\n    'mkdown',\n    'ml',\n    'mli',\n    'mm',\n    'mxml',\n    'nfm',\n    'nfo',\n    'njk',\n    'noon',\n    'npmignore',\n    'npmrc',\n    'nvmrc',\n    'ops',\n    'pas',\n    'pasm',\n    'patch',\n    'pbxproj',\n    'pch',\n    'pem',\n    'pg',\n    'php',\n    'php3',\n    'php4',\n    'php5',\n    'phpt',\n    'phtml',\n    'pir',\n    'pl',\n    'pm',\n    'pmc',\n    'pod',\n    'pot',\n    'properties',\n    'props',\n    'pt',\n    'pug',\n    'py',\n    'r',\n    'rake',\n    'rb',\n    'rdoc',\n    'rdoc_options',\n    'resx',\n    'rhtml',\n    'rjs',\n    'rlib',\n    'rmd',\n    'ron',\n    'rs',\n    'rss',\n    'rst',\n    'rtf',\n    'rvmrc',\n    'rxml',\n    's',\n    'sass',\n    'scala',\n    'scm',\n    'scss',\n    'seestyle',\n    'sh',\n    'shtml',\n    'sls',\n    'spec',\n    'sql',\n    'sqlite',\n    'ss',\n    'sss',\n    'st',\n    'strings',\n    'sty',\n    'styl',\n    'stylus',\n    'sub',\n    'sublime-build',\n    'sublime-commands',\n    'sublime-completions',\n    'sublime-keymap',\n    'sublime-macro',\n    'sublime-menu',\n    'sublime-project',\n    'sublime-settings',\n    'sublime-workspace',\n    'sv',\n    'svc',\n    'svg',\n    't',\n    'tcl',\n    'tcsh',\n    'terminal',\n    'tex',\n    'text',\n    'textile',\n    'tg',\n    'tmLanguage',\n    'tmTheme',\n    'tmpl',\n    'toml',\n    'tpl',\n    'ts',\n    'tsv',\n    'tsx',\n    'tt',\n    'tt2',\n    'ttml',\n    'txt',\n    'v',\n    'vb',\n    'vbs',\n    'vh',\n    'vhd',\n    'vhdl',\n    'vim',\n    'viminfo',\n    'vimrc',\n    'vue',\n    'webapp',\n    'wxml',\n    'wxss',\n    'x-php',\n    'xaml',\n    'xht',\n    'xhtml',\n    'xml',\n    'xs',\n    'xsd',\n    'xsl',\n    'xslt',\n    'yaml',\n    'yml',\n    'zsh',\n    'zshrc',\n];\nexport default list;\n", "/** List of binary file extensions */\nconst list = [\n    'dds',\n    'eot',\n    'gif',\n    'ico',\n    'jar',\n    'jpeg',\n    'jpg',\n    'pdf',\n    'png',\n    'swf',\n    'tga',\n    'ttf',\n    'zip',\n];\nexport default list;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AACA,eAA0B;;;ACD1B;AAAA,IAAAC,eAAA;AAAA,IAAAA,eAAA;AACA,IAAM,OAAO;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAC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",
  "names": ["import_dist", "import_dist", "import_dist", "list", "edition_browsers_default", "edition_browsers_default"]
}
