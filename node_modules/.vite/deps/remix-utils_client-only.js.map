{
  "version": 3,
  "sources": ["../../.pnpm/remix-utils@7.7.0_@remix-run+cloudflare@2.15.3_@remix-run+react@2.15.3_react@18.3.1_zod@3.24.1/node_modules/remix-utils/build/react/client-only.js", "../../.pnpm/remix-utils@7.7.0_@remix-run+cloudflare@2.15.3_@remix-run+react@2.15.3_react@18.3.1_zod@3.24.1/node_modules/remix-utils/build/react/use-hydrated.js"],
  "sourcesContent": ["import * as React from \"react\";\nimport { useHydrated } from \"./use-hydrated.js\";\n/**\n * Render the children only after the JS has loaded client-side. Use an optional\n * fallback component if the JS is not yet loaded.\n *\n * Example: Render a Chart component if JS loads, renders a simple FakeChart\n * component server-side or if there is no JS. The FakeChart can have only the\n * UI without the behavior or be a loading spinner or skeleton.\n * ```tsx\n * return (\n *   <ClientOnly fallback={<FakeChart />}>\n *     {() => <Chart />}\n *   </ClientOnly>\n * );\n * ```\n */\nexport function ClientOnly({ children, fallback = null }) {\n    return useHydrated() ? React.createElement(React.Fragment, null, children()) : React.createElement(React.Fragment, null, fallback);\n}\n", "import { useSyncExternalStore } from \"react\";\nfunction subscribe() {\n    // biome-ignore lint/suspicious/noEmptyBlockStatements: Mock function\n    return () => { };\n}\n/**\n * Return a boolean indicating if the JS has been hydrated already.\n * When doing Server-Side Rendering, the result will always be false.\n * When doing Client-Side Rendering, the result will always be false on the\n * first render and true from then on. Even if a new component renders it will\n * always start with true.\n *\n * Example: Disable a button that needs JS to work.\n * ```tsx\n * let hydrated = useHydrated();\n * return (\n *   <button type=\"button\" disabled={!hydrated} onClick={doSomethingCustom}>\n *     Click me\n *   </button>\n * );\n * ```\n */\nexport function useHydrated() {\n    return useSyncExternalStore(subscribe, () => true, () => false);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAAA,IAAAA,eAAA;AAAA,YAAuB;;;ACAvB;AAAA,IAAAC,eAAA;AAAA,IAAAA,eAAA;AAAA,mBAAqC;AACrC,SAAS,YAAY;AAEjB,SAAO,MAAM;AAAA,EAAE;AACnB;AAkBO,SAAS,cAAc;AAC1B,aAAO,mCAAqB,WAAW,MAAM,MAAM,MAAM,KAAK;AAClE;;;ADPO,SAAS,WAAW,EAAE,UAAU,WAAW,KAAK,GAAG;AACtD,SAAO,YAAY,IAAU,oBAAoB,gBAAU,MAAM,SAAS,CAAC,IAAU,oBAAoB,gBAAU,MAAM,QAAQ;AACrI;",
  "names": ["import_dist", "import_dist"]
}
