{
  "version": 3,
  "sources": ["../../.pnpm/partial-json@0.1.7/node_modules/partial-json/dist/options.js", "../../.pnpm/partial-json@0.1.7/node_modules/partial-json/dist/index.js", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/ollama-facade.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/ollama-chat-language-model.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/convert-to-ollama-chat-messages.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/generate-tool/infer-tool-calls-from-stream.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/map-ollama-finish-reason.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/ollama-error.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/utils/remove-undefined.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/utils/response-handler.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/utils/text-line-stream.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/ollama-provider.ts", "../../.pnpm/ollama-ai-provider@0.15.2_zod@3.24.1/node_modules/ollama-ai-provider/src/ollama-embedding-model.ts"],
  "sourcesContent": ["\"use strict\";\n/**\n * Sometimes you don't allow every type to be partially parsed.\n * For example, you may not want a partial number because it may increase its size gradually before it's complete.\n * In this case, you can use the `Allow` object to control what types you allow to be partially parsed.\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Allow = exports.ALL = exports.COLLECTION = exports.ATOM = exports.SPECIAL = exports.INF = exports._INFINITY = exports.INFINITY = exports.NAN = exports.BOOL = exports.NULL = exports.OBJ = exports.ARR = exports.NUM = exports.STR = void 0;\n/**\n * allow partial strings like `\"hello \\u12` to be parsed as `\"hello \"`\n */\nexports.STR = 0b000000001;\n/**\n * allow partial numbers like `123.` to be parsed as `123`\n */\nexports.NUM = 0b000000010;\n/**\n * allow partial arrays like `[1, 2,` to be parsed as `[1, 2]`\n */\nexports.ARR = 0b000000100;\n/**\n * allow partial objects like `{\"a\": 1, \"b\":` to be parsed as `{\"a\": 1}`\n */\nexports.OBJ = 0b000001000;\n/**\n * allow `nu` to be parsed as `null`\n */\nexports.NULL = 0b000010000;\n/**\n * allow `tr` to be parsed as `true`, and `fa` to be parsed as `false`\n */\nexports.BOOL = 0b000100000;\n/**\n * allow `Na` to be parsed as `NaN`\n */\nexports.NAN = 0b001000000;\n/**\n * allow `Inf` to be parsed as `Infinity`\n */\nexports.INFINITY = 0b010000000;\n/**\n * allow `-Inf` to be parsed as `-Infinity`\n */\nexports._INFINITY = 0b100000000;\nexports.INF = exports.INFINITY | exports._INFINITY;\nexports.SPECIAL = exports.NULL | exports.BOOL | exports.INF | exports.NAN;\nexports.ATOM = exports.STR | exports.NUM | exports.SPECIAL;\nexports.COLLECTION = exports.ARR | exports.OBJ;\nexports.ALL = exports.ATOM | exports.COLLECTION;\n/**\n * Control what types you allow to be partially parsed.\n * The default is to allow all types to be partially parsed, which in most casees is the best option.\n * @example\n * If you don't want to allow partial objects, you can use the following code:\n * ```ts\n * import { Allow, parse } from \"partial-json\";\n * parse(`[{\"a\": 1, \"b\": 2}, {\"a\": 3,`, Allow.ARR); // [ { a: 1, b: 2 } ]\n * ```\n * Or you can use `~` to disallow a type:\n * ```ts\n * parse(`[{\"a\": 1, \"b\": 2}, {\"a\": 3,`, ~Allow.OBJ); // [ { a: 1, b: 2 } ]\n * ```\n * @example\n * If you don't want to allow partial strings, you can use the following code:\n * ```ts\n * import { Allow, parse } from \"partial-json\";\n * parse(`[\"complete string\", \"incompl`, ~Allow.STR); // [ 'complete string' ]\n * ```\n */\nexports.Allow = { STR: exports.STR, NUM: exports.NUM, ARR: exports.ARR, OBJ: exports.OBJ, NULL: exports.NULL, BOOL: exports.BOOL, NAN: exports.NAN, INFINITY: exports.INFINITY, _INFINITY: exports._INFINITY, INF: exports.INF, SPECIAL: exports.SPECIAL, ATOM: exports.ATOM, COLLECTION: exports.COLLECTION, ALL: exports.ALL };\nexports.default = exports.Allow;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Allow = exports.MalformedJSON = exports.PartialJSON = exports.parseJSON = exports.parse = void 0;\nconst options_1 = require(\"./options\");\nObject.defineProperty(exports, \"Allow\", { enumerable: true, get: function () { return options_1.Allow; } });\n__exportStar(require(\"./options\"), exports);\nclass PartialJSON extends Error {\n}\nexports.PartialJSON = PartialJSON;\nclass MalformedJSON extends Error {\n}\nexports.MalformedJSON = MalformedJSON;\n/**\n * Parse incomplete JSON\n * @param {string} jsonString Partial JSON to be parsed\n * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details\n * @returns The parsed JSON\n * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)\n * @throws {MalformedJSON} If the JSON is malformed\n */\nfunction parseJSON(jsonString, allowPartial = options_1.Allow.ALL) {\n    if (typeof jsonString !== \"string\") {\n        throw new TypeError(`expecting str, got ${typeof jsonString}`);\n    }\n    if (!jsonString.trim()) {\n        throw new Error(`${jsonString} is empty`);\n    }\n    return _parseJSON(jsonString.trim(), allowPartial);\n}\nexports.parseJSON = parseJSON;\n;\nconst _parseJSON = (jsonString, allow) => {\n    const length = jsonString.length;\n    let index = 0;\n    const markPartialJSON = (msg) => {\n        throw new PartialJSON(`${msg} at position ${index}`);\n    };\n    const throwMalformedError = (msg) => {\n        throw new MalformedJSON(`${msg} at position ${index}`);\n    };\n    const parseAny = () => {\n        skipBlank();\n        if (index >= length)\n            markPartialJSON(\"Unexpected end of input\");\n        if (jsonString[index] === '\"')\n            return parseStr();\n        if (jsonString[index] === \"{\")\n            return parseObj();\n        if (jsonString[index] === \"[\")\n            return parseArr();\n        if (jsonString.substring(index, index + 4) === \"null\" || (options_1.Allow.NULL & allow && length - index < 4 && \"null\".startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return null;\n        }\n        if (jsonString.substring(index, index + 4) === \"true\" || (options_1.Allow.BOOL & allow && length - index < 4 && \"true\".startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return true;\n        }\n        if (jsonString.substring(index, index + 5) === \"false\" || (options_1.Allow.BOOL & allow && length - index < 5 && \"false\".startsWith(jsonString.substring(index)))) {\n            index += 5;\n            return false;\n        }\n        if (jsonString.substring(index, index + 8) === \"Infinity\" || (options_1.Allow.INFINITY & allow && length - index < 8 && \"Infinity\".startsWith(jsonString.substring(index)))) {\n            index += 8;\n            return Infinity;\n        }\n        if (jsonString.substring(index, index + 9) === \"-Infinity\" || (options_1.Allow._INFINITY & allow && 1 < length - index && length - index < 9 && \"-Infinity\".startsWith(jsonString.substring(index)))) {\n            index += 9;\n            return -Infinity;\n        }\n        if (jsonString.substring(index, index + 3) === \"NaN\" || (options_1.Allow.NAN & allow && length - index < 3 && \"NaN\".startsWith(jsonString.substring(index)))) {\n            index += 3;\n            return NaN;\n        }\n        return parseNum();\n    };\n    const parseStr = () => {\n        const start = index;\n        let escape = false;\n        index++; // skip initial quote\n        while (index < length && (jsonString[index] !== '\"' || (escape && jsonString[index - 1] === \"\\\\\"))) {\n            escape = jsonString[index] === \"\\\\\" ? !escape : false;\n            index++;\n        }\n        if (jsonString.charAt(index) == '\"') {\n            try {\n                return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n            }\n            catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n        else if (options_1.Allow.STR & allow) {\n            try {\n                return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n            }\n            catch (e) {\n                // SyntaxError: Invalid escape sequence\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"\\\\\")) + '\"');\n            }\n        }\n        markPartialJSON(\"Unterminated string literal\");\n    };\n    const parseObj = () => {\n        index++; // skip initial brace\n        skipBlank();\n        const obj = {};\n        try {\n            while (jsonString[index] !== \"}\") {\n                skipBlank();\n                if (index >= length && options_1.Allow.OBJ & allow)\n                    return obj;\n                const key = parseStr();\n                skipBlank();\n                index++; // skip colon\n                try {\n                    const value = parseAny();\n                    obj[key] = value;\n                }\n                catch (e) {\n                    if (options_1.Allow.OBJ & allow)\n                        return obj;\n                    else\n                        throw e;\n                }\n                skipBlank();\n                if (jsonString[index] === \",\")\n                    index++; // skip comma\n            }\n        }\n        catch (e) {\n            if (options_1.Allow.OBJ & allow)\n                return obj;\n            else\n                markPartialJSON(\"Expected '}' at end of object\");\n        }\n        index++; // skip final brace\n        return obj;\n    };\n    const parseArr = () => {\n        index++; // skip initial bracket\n        const arr = [];\n        try {\n            while (jsonString[index] !== \"]\") {\n                arr.push(parseAny());\n                skipBlank();\n                if (jsonString[index] === \",\") {\n                    index++; // skip comma\n                }\n            }\n        }\n        catch (e) {\n            if (options_1.Allow.ARR & allow) {\n                return arr;\n            }\n            markPartialJSON(\"Expected ']' at end of array\");\n        }\n        index++; // skip final bracket\n        return arr;\n    };\n    const parseNum = () => {\n        if (index === 0) {\n            if (jsonString === \"-\")\n                throwMalformedError(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString);\n            }\n            catch (e) {\n                if (options_1.Allow.NUM & allow)\n                    try {\n                        return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf(\"e\")));\n                    }\n                    catch (e) { }\n                throwMalformedError(String(e));\n            }\n        }\n        const start = index;\n        if (jsonString[index] === \"-\")\n            index++;\n        while (jsonString[index] && \",]}\".indexOf(jsonString[index]) === -1)\n            index++;\n        if (index == length && !(options_1.Allow.NUM & allow))\n            markPartialJSON(\"Unterminated number literal\");\n        try {\n            return JSON.parse(jsonString.substring(start, index));\n        }\n        catch (e) {\n            if (jsonString.substring(start, index) === \"-\")\n                markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf(\"e\")));\n            }\n            catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n    };\n    const skipBlank = () => {\n        while (index < length && \" \\n\\r\\t\".includes(jsonString[index])) {\n            index++;\n        }\n    };\n    return parseAny();\n};\nconst parse = parseJSON;\nexports.parse = parse;\n", "import { withoutTrailingSlash } from '@ai-sdk/provider-utils'\n\nimport { OllamaChatLanguageModel } from '@/ollama-chat-language-model'\nimport { OllamaChatModelId, OllamaChatSettings } from '@/ollama-chat-settings'\nimport { OllamaProviderSettings } from '@/ollama-provider'\n\nexport class Ollama {\n  readonly baseURL: string\n\n  readonly headers?: Record<string, string>\n\n  constructor(options: OllamaProviderSettings = {}) {\n    this.baseURL =\n      withoutTrailingSlash(options.baseURL) ?? 'http://127.0.0.1:11434/api'\n\n    this.headers = options.headers\n  }\n\n  private get baseConfig() {\n    return {\n      baseURL: this.baseURL,\n      headers: () => ({\n        ...this.headers,\n      }),\n    }\n  }\n\n  chat(modelId: OllamaChatModelId, settings: OllamaChatSettings = {}) {\n    return new OllamaChatLanguageModel(modelId, settings, {\n      provider: 'ollama.chat',\n      ...this.baseConfig,\n    })\n  }\n}\n", "/* eslint-disable camelcase */\nimport {\n  LanguageModelV1,\n  LanguageModelV1CallWarning,\n  LanguageModelV1FinishReason,\n  LanguageModelV1FunctionToolCall,\n  LanguageModelV1StreamPart,\n} from '@ai-sdk/provider'\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  generateId,\n  ParseResult,\n  postJsonToApi,\n} from '@ai-sdk/provider-utils'\nimport { z } from 'zod'\n\nimport { convertToOllamaChatMessages } from '@/convert-to-ollama-chat-messages'\nimport { InferToolCallsFromStream } from '@/generate-tool/infer-tool-calls-from-stream'\nimport { mapOllamaFinishReason } from '@/map-ollama-finish-reason'\nimport { OllamaChatModelId, OllamaChatSettings } from '@/ollama-chat-settings'\nimport { ollamaFailedResponseHandler } from '@/ollama-error'\nimport { createJsonStreamResponseHandler, removeUndefined } from '@/utils'\n\ninterface OllamaChatConfig {\n  baseURL: string\n  fetch?: typeof fetch\n  headers: () => Record<string, string | undefined>\n  provider: string\n}\n\nexport class OllamaChatLanguageModel implements LanguageModelV1 {\n  readonly specificationVersion = 'v1'\n  readonly defaultObjectGenerationMode = 'json'\n  readonly supportsImageUrls = false\n\n  constructor(\n    public readonly modelId: OllamaChatModelId,\n    public readonly settings: OllamaChatSettings,\n    public readonly config: OllamaChatConfig,\n  ) {}\n\n  get provider(): string {\n    return this.config.provider\n  }\n\n  private getArguments({\n    frequencyPenalty,\n    maxTokens,\n    mode,\n    presencePenalty,\n    prompt,\n    responseFormat,\n    seed,\n    stopSequences,\n    temperature,\n    topK,\n    topP,\n  }: Parameters<LanguageModelV1['doGenerate']>[0]) {\n    const type = mode.type\n\n    const warnings: LanguageModelV1CallWarning[] = []\n\n    if (\n      responseFormat !== undefined &&\n      responseFormat.type === 'json' &&\n      responseFormat.schema !== undefined\n    ) {\n      warnings.push({\n        details: 'JSON response format schema is not supported',\n        setting: 'responseFormat',\n        type: 'unsupported-setting',\n      })\n    }\n\n    const baseArguments = {\n      format: responseFormat?.type,\n      model: this.modelId,\n      options: removeUndefined({\n        f16_kv: this.settings.f16Kv,\n        frequency_penalty: frequencyPenalty,\n        low_vram: this.settings.lowVram,\n        main_gpu: this.settings.mainGpu,\n        min_p: this.settings.minP,\n        mirostat: this.settings.mirostat,\n        mirostat_eta: this.settings.mirostatEta,\n        mirostat_tau: this.settings.mirostatTau,\n        num_batch: this.settings.numBatch,\n        num_ctx: this.settings.numCtx,\n        num_gpu: this.settings.numGpu,\n        num_keep: this.settings.numKeep,\n        num_predict: maxTokens,\n        num_thread: this.settings.numThread,\n        numa: this.settings.numa,\n        penalize_newline: this.settings.penalizeNewline,\n        presence_penalty: presencePenalty,\n        repeat_last_n: this.settings.repeatLastN,\n        repeat_penalty: this.settings.repeatPenalty,\n        seed,\n        stop: this.settings.stop ?? stopSequences,\n        temperature,\n        tfs_z: this.settings.tfsZ,\n        top_k: this.settings.topK ?? topK,\n        top_p: topP,\n        typical_p: this.settings.typicalP,\n        use_mlock: this.settings.useMlock,\n        use_mmap: this.settings.useMmap,\n        vocab_only: this.settings.vocabOnly,\n      }),\n    }\n\n    switch (type) {\n      case 'regular': {\n        const tools = mode.tools?.length ? mode.tools : undefined\n\n        return {\n          args: {\n            ...baseArguments,\n            messages: convertToOllamaChatMessages(prompt),\n            tools: tools?.map((tool) => ({\n              function: {\n                description: tool.description,\n                name: tool.name,\n                parameters: tool.parameters,\n              },\n              type: 'function',\n            })),\n          },\n          type,\n          warnings,\n        }\n      }\n\n      case 'object-json': {\n        return {\n          args: {\n            ...baseArguments,\n            format: 'json',\n            messages: convertToOllamaChatMessages(prompt),\n          },\n          type,\n          warnings,\n        }\n      }\n\n      case 'object-tool': {\n        return {\n          args: {\n            ...baseArguments,\n            messages: convertToOllamaChatMessages(prompt),\n            tool_choice: {\n              function: { name: mode.tool.name },\n              type: 'function',\n            },\n            tools: [\n              {\n                function: {\n                  description: mode.tool.description,\n                  name: mode.tool.name,\n                  parameters: mode.tool.parameters,\n                },\n                type: 'function',\n              },\n            ],\n          },\n          type,\n          warnings,\n        }\n      }\n\n      default: {\n        const _exhaustiveCheck: string = type\n        throw new Error(`Unsupported type: ${_exhaustiveCheck}`)\n      }\n    }\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV1['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV1['doGenerate']>>> {\n    const { args, warnings } = this.getArguments(options)\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      abortSignal: options.abortSignal,\n      body: {\n        ...args,\n        stream: false,\n      },\n      failedResponseHandler: ollamaFailedResponseHandler,\n      fetch: this.config.fetch,\n      headers: combineHeaders(this.config.headers(), options.headers),\n      successfulResponseHandler: createJsonResponseHandler(\n        ollamaChatResponseSchema,\n      ),\n      url: `${this.config.baseURL}/chat`,\n    })\n\n    const { messages: rawPrompt, ...rawSettings } = args\n\n    const toolCalls: LanguageModelV1FunctionToolCall[] | undefined =\n      response.message.tool_calls?.map((toolCall) => ({\n        args: JSON.stringify(toolCall.function.arguments),\n        toolCallId: toolCall.id ?? generateId(),\n        toolCallType: 'function',\n        toolName: toolCall.function.name,\n      }))\n\n    return {\n      finishReason: mapOllamaFinishReason({\n        finishReason: response.done_reason,\n        hasToolCalls: toolCalls !== undefined && toolCalls.length > 0,\n      }),\n      rawCall: { rawPrompt, rawSettings },\n      rawResponse: { headers: responseHeaders },\n      text: response.message.content ?? undefined,\n      toolCalls,\n      usage: {\n        completionTokens: response.eval_count || 0,\n        promptTokens: response.prompt_eval_count || 0,\n      },\n      warnings,\n    }\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV1['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV1['doStream']>>> {\n    const { args, type, warnings } = this.getArguments(options)\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      abortSignal: options.abortSignal,\n      body: args,\n      failedResponseHandler: ollamaFailedResponseHandler,\n      fetch: this.config.fetch,\n      headers: combineHeaders(this.config.headers(), options.headers),\n      successfulResponseHandler: createJsonStreamResponseHandler(\n        ollamaChatStreamChunkSchema,\n      ),\n      url: `${this.config.baseURL}/chat`,\n    })\n\n    const { messages: rawPrompt, ...rawSettings } = args\n\n    const tools =\n      options.mode.type === 'regular'\n        ? options.mode.tools\n        : options.mode.type === 'object-tool'\n          ? [options.mode.tool]\n          : undefined\n\n    const inferToolCallsFromStream = new InferToolCallsFromStream({\n      tools,\n      type,\n    })\n\n    let finishReason: LanguageModelV1FinishReason = 'other'\n    let usage: { completionTokens: number; promptTokens: number } = {\n      completionTokens: Number.NaN,\n      promptTokens: Number.NaN,\n    }\n\n    const { experimentalStreamTools = true } = this.settings\n\n    return {\n      rawCall: { rawPrompt, rawSettings },\n      rawResponse: { headers: responseHeaders },\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<z.infer<typeof ollamaChatStreamChunkSchema>>,\n          LanguageModelV1StreamPart\n        >({\n          async flush(controller) {\n            controller.enqueue({\n              finishReason,\n              type: 'finish',\n              usage,\n            })\n          },\n          async transform(chunk, controller) {\n            if (!chunk.success) {\n              controller.enqueue({ error: chunk.error, type: 'error' })\n              return\n            }\n\n            const value = chunk.value\n\n            if (value.done) {\n              finishReason = inferToolCallsFromStream.finish({ controller })\n              usage = {\n                completionTokens: value.eval_count,\n                promptTokens: value.prompt_eval_count || 0,\n              }\n\n              return\n            }\n\n            if (experimentalStreamTools) {\n              const isToolCallStream = inferToolCallsFromStream.parse({\n                controller,\n                delta: value.message.content,\n              })\n\n              if (isToolCallStream) {\n                return\n              }\n            }\n\n            if (value.message.content !== null) {\n              controller.enqueue({\n                textDelta: value.message.content,\n                type: 'text-delta',\n              })\n            }\n          },\n        }),\n      ),\n      warnings,\n    }\n  }\n}\n\nconst ollamaChatResponseSchema = z.object({\n  created_at: z.string(),\n  done: z.literal(true),\n  done_reason: z.string().optional().nullable(),\n  eval_count: z.number(),\n  eval_duration: z.number(),\n  load_duration: z.number().optional(),\n  message: z.object({\n    content: z.string(),\n    role: z.string(),\n    tool_calls: z\n      .array(\n        z.object({\n          function: z.object({\n            arguments: z.record(z.any()),\n            name: z.string(),\n          }),\n          id: z.string().optional(),\n        }),\n      )\n      .optional()\n      .nullable(),\n  }),\n  model: z.string(),\n  prompt_eval_count: z.number().optional(),\n  prompt_eval_duration: z.number().optional(),\n  total_duration: z.number(),\n})\n\nexport type OllamaChatResponseSchema = z.infer<typeof ollamaChatResponseSchema>\n\nconst ollamaChatStreamChunkSchema = z.discriminatedUnion('done', [\n  z.object({\n    created_at: z.string(),\n    done: z.literal(false),\n    message: z.object({\n      content: z.string(),\n      role: z.string(),\n    }),\n    model: z.string(),\n  }),\n  z.object({\n    created_at: z.string(),\n    done: z.literal(true),\n    eval_count: z.number(),\n    eval_duration: z.number(),\n    load_duration: z.number().optional(),\n    model: z.string(),\n    prompt_eval_count: z.number().optional(),\n    prompt_eval_duration: z.number().optional(),\n    total_duration: z.number(),\n  }),\n])\n", "import {\n  LanguageModelV1Prompt,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider'\nimport { convertUint8ArrayToBase64 } from '@ai-sdk/provider-utils'\n\nimport { OllamaChatPrompt } from '@/ollama-chat-prompt'\n\nexport function convertToOllamaChatMessages(\n  prompt: LanguageModelV1Prompt,\n): OllamaChatPrompt {\n  const messages: OllamaChatPrompt = []\n\n  for (const { content, role } of prompt) {\n    switch (role) {\n      case 'system': {\n        messages.push({ content, role: 'system' })\n        break\n      }\n\n      case 'user': {\n        messages.push({\n          ...content.reduce<{ content: string; images?: string[] }>(\n            (previous, current) => {\n              if (current.type === 'text') {\n                previous.content += current.text\n              } else if (\n                current.type === 'image' &&\n                current.image instanceof URL\n              ) {\n                throw new UnsupportedFunctionalityError({\n                  functionality: 'Image URLs in user messages',\n                })\n              } else if (\n                current.type === 'image' &&\n                current.image instanceof Uint8Array\n              ) {\n                previous.images = previous.images || []\n                previous.images.push(convertUint8ArrayToBase64(current.image))\n              }\n\n              return previous\n            },\n            { content: '' },\n          ),\n          role: 'user',\n        })\n        break\n      }\n\n      case 'assistant': {\n        const text: Array<string> = []\n        const toolCalls: Array<{\n          function: { arguments: object; name: string }\n          id: string\n          type: 'function'\n        }> = []\n\n        for (const part of content) {\n          switch (part.type) {\n            case 'text': {\n              text.push(part.text)\n              break\n            }\n            case 'tool-call': {\n              toolCalls.push({\n                function: {\n                  arguments: part.args as object,\n                  name: part.toolName,\n                },\n                id: part.toolCallId,\n                type: 'function',\n              })\n              break\n            }\n            default: {\n              const _exhaustiveCheck: never = part\n              throw new Error(`Unsupported part: ${_exhaustiveCheck}`)\n            }\n          }\n        }\n\n        messages.push({\n          content: text.join(','),\n          role: 'assistant',\n          tool_calls: toolCalls.length > 0 ? toolCalls : undefined,\n        })\n\n        break\n      }\n\n      case 'tool': {\n        messages.push(\n          ...content.map((part) => ({\n            // Non serialized contents are not accepted by ollama, triggering the following error:\n            // \"json: cannot unmarshal array into Go struct field ChatRequest.messages of type string\"\n            content:\n              typeof part.result === 'object'\n                ? JSON.stringify(part.result)\n                : `${part.result}`,\n            role: 'tool' as const,\n            tool_call_id: part.toolCallId,\n          })),\n        )\n        break\n      }\n\n      default: {\n        const _exhaustiveCheck: string = role\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`)\n      }\n    }\n  }\n\n  return messages\n}\n", "import type {\n  LanguageModelV1CallOptions,\n  LanguageModelV1FinishReason,\n  LanguageModelV1FunctionTool,\n  LanguageModelV1StreamPart,\n} from '@ai-sdk/provider'\nimport { generateId } from '@ai-sdk/provider-utils'\nimport { parse } from 'partial-json'\n\ntype ToolCall = {\n  function: {\n    arguments: string\n    name: string\n  }\n  id: string\n  type: 'function'\n}\n\nexport type CallModeType = LanguageModelV1CallOptions['mode']['type']\n\nexport class InferToolCallsFromStream {\n  private _firstMessage: boolean\n  private readonly _toolCalls: ToolCall[]\n  private _tools?: LanguageModelV1FunctionTool[]\n  private _toolPartial: string\n  private readonly _type: CallModeType\n  private _detectedToolCall: boolean\n\n  constructor({\n    tools,\n    type,\n  }: {\n    tools: LanguageModelV1FunctionTool[] | undefined\n    type: CallModeType\n  }) {\n    this._firstMessage = true\n    this._tools = tools\n    this._toolPartial = ''\n    this._toolCalls = []\n    this._type = type\n    this._detectedToolCall = false\n  }\n\n  get toolCalls(): ToolCall[] {\n    return this._toolCalls\n  }\n\n  get detectedToolCall(): boolean {\n    return this._detectedToolCall\n  }\n\n  parse({\n    controller,\n    delta,\n  }: {\n    controller: TransformStreamDefaultController<LanguageModelV1StreamPart>\n    delta: string\n  }): boolean {\n    this.detectToolCall(delta)\n\n    if (!this._detectedToolCall) {\n      return false\n    }\n\n    this._toolPartial += delta\n\n    let parsedFunctions = parse(this._toolPartial)\n    if (!Array.isArray(parsedFunctions)) {\n      parsedFunctions = [parsedFunctions]\n    }\n\n    for (const [index, parsedFunction] of parsedFunctions.entries()) {\n      const parsedArguments = JSON.stringify(parsedFunction?.parameters) ?? ''\n\n      if (parsedArguments === '') {\n        continue\n      }\n\n      if (!this._toolCalls[index]) {\n        this._toolCalls[index] = {\n          function: {\n            arguments: '',\n            name: parsedFunction.name,\n          },\n          id: generateId(),\n          type: 'function',\n        }\n      }\n\n      const toolCall = this._toolCalls[index]\n      toolCall.function.arguments = parsedArguments\n\n      controller.enqueue({\n        argsTextDelta: delta,\n        toolCallId: toolCall.id,\n        toolCallType: 'function',\n        toolName: toolCall.function.name,\n        type: 'tool-call-delta',\n      })\n    }\n\n    return true\n  }\n\n  finish({\n    controller,\n  }: {\n    controller: TransformStreamDefaultController<LanguageModelV1StreamPart>\n  }): LanguageModelV1FinishReason {\n    for (const toolCall of this.toolCalls) {\n      controller.enqueue({\n        args: toolCall.function.arguments,\n        toolCallId: toolCall.id,\n        toolCallType: 'function',\n        toolName: toolCall.function.name,\n        type: 'tool-call',\n      })\n    }\n\n    return this.finishReason()\n  }\n\n  private detectToolCall(delta: string) {\n    if (!this._tools || this._tools.length === 0) {\n      return\n    }\n\n    if (this._firstMessage) {\n      if (this._type === 'object-tool') {\n        this._detectedToolCall = true\n      } else if (\n        this._type === 'regular' &&\n        (delta.trim().startsWith('{') || delta.trim().startsWith('['))\n      ) {\n        this._detectedToolCall = true\n      }\n\n      this._firstMessage = false\n    }\n  }\n\n  private finishReason(): LanguageModelV1FinishReason {\n    if (!this.detectedToolCall) {\n      return 'stop'\n    }\n\n    return this._type === 'object-tool' ? 'stop' : 'tool-calls'\n  }\n}\n", "import { LanguageModelV1FinishReason } from '@ai-sdk/provider'\n\nexport function mapOllamaFinishReason({\n  finishReason,\n  hasToolCalls,\n}: {\n  finishReason: string | null | undefined\n  hasToolCalls: boolean\n}): LanguageModelV1FinishReason {\n  switch (finishReason) {\n    case 'stop': {\n      return hasToolCalls ? 'tool-calls' : 'stop'\n    }\n    default: {\n      return 'other'\n    }\n  }\n}\n", "import { createJsonErrorResponseHandler } from '@ai-sdk/provider-utils'\nimport { z } from 'zod'\n\nconst ollamaErrorDataSchema = z.object({\n  error: z.object({\n    code: z.string().nullable(),\n    message: z.string(),\n    param: z.any().nullable(),\n    type: z.string(),\n  }),\n})\n\nexport type OllamaErrorData = z.infer<typeof ollamaErrorDataSchema>\n\nexport const ollamaFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: ollamaErrorDataSchema,\n  errorToMessage: (data) => data.error.message,\n})\n", "export function removeUndefined(object: object) {\n  return Object.fromEntries(\n    Object.entries(object).filter(([, v]) => v !== undefined),\n  )\n}\n", "import { EmptyResponseBodyError } from '@ai-sdk/provider'\nimport {\n  extractResponseHeaders,\n  ParseResult,\n  ResponseHandler,\n  safeParseJSON,\n} from '@ai-sdk/provider-utils'\nimport { ZodSchema } from 'zod'\n\nimport { TextLineStream } from '@/utils/text-line-stream'\n\nexport const createJsonStreamResponseHandler =\n  <T>(\n    chunkSchema: ZodSchema<T>,\n  ): ResponseHandler<ReadableStream<ParseResult<T>>> =>\n  async ({ response }: { response: Response }) => {\n    const responseHeaders = extractResponseHeaders(response)\n\n    if (response.body === null) {\n      throw new EmptyResponseBodyError({})\n    }\n\n    return {\n      responseHeaders,\n      value: response.body\n        .pipeThrough(new TextDecoderStream())\n        .pipeThrough(new TextLineStream())\n        .pipeThrough(\n          new TransformStream<string, ParseResult<T>>({\n            transform(chunkText, controller) {\n              controller.enqueue(\n                safeParseJSON({\n                  schema: chunkSchema,\n                  text: chunkText,\n                }),\n              )\n            },\n          }),\n        ),\n    }\n  }\n", "export class TextLineStream extends TransformStream<string, string> {\n  private buffer = ''\n\n  constructor() {\n    super({\n      flush: (controller) => {\n        if (this.buffer.length === 0) return\n\n        controller.enqueue(this.buffer)\n      },\n      transform: (chunkText, controller) => {\n        chunkText = this.buffer + chunkText\n\n        while (true) {\n          const EOL = chunkText.indexOf('\\n')\n\n          if (EOL === -1) break\n\n          controller.enqueue(chunkText.slice(0, EOL))\n          chunkText = chunkText.slice(EOL + 1)\n        }\n\n        this.buffer = chunkText\n      },\n    })\n  }\n}\n", "import { EmbeddingModelV1, LanguageModelV1, ProviderV1 } from '@ai-sdk/provider'\nimport { withoutTrailingSlash } from '@ai-sdk/provider-utils'\n\nimport { OllamaChatLanguageModel } from '@/ollama-chat-language-model'\nimport { OllamaChatModelId, OllamaChatSettings } from '@/ollama-chat-settings'\nimport { OllamaEmbeddingModel } from '@/ollama-embedding-model'\nimport {\n  OllamaEmbeddingModelId,\n  OllamaEmbeddingSettings,\n} from '@/ollama-embedding-settings'\n\nexport interface OllamaProvider extends ProviderV1 {\n  (modelId: OllamaChatModelId, settings?: OllamaChatSettings): LanguageModelV1\n\n  chat(\n    modelId: OllamaChatModelId,\n    settings?: OllamaChatSettings,\n  ): LanguageModelV1\n\n  /**\n   * @deprecated Use `textEmbeddingModel` instead.\n   */\n  embedding(\n    modelId: OllamaEmbeddingModelId,\n    settings?: OllamaEmbeddingSettings,\n  ): EmbeddingModelV1<string>\n\n  languageModel(\n    modelId: OllamaChatModelId,\n    settings?: OllamaChatSettings,\n  ): LanguageModelV1\n\n  /**\n   * @deprecated Use `textEmbeddingModel()` instead.\n   */\n  textEmbedding(\n    modelId: OllamaEmbeddingModelId,\n    settings?: OllamaEmbeddingSettings,\n  ): EmbeddingModelV1<string>\n\n  textEmbeddingModel(\n    modelId: OllamaEmbeddingModelId,\n    settings?: OllamaEmbeddingSettings,\n  ): EmbeddingModelV1<string>\n}\n\nexport interface OllamaProviderSettings {\n  /**\n   * Base URL for Ollama API calls.\n   */\n  baseURL?: string\n  /**\n   * Custom fetch implementation. You can use it as a middleware to intercept\n   * requests or to provide a custom fetch implementation for e.g. testing\n   */\n  fetch?: typeof fetch\n  /**\n   * @internal\n   */\n  generateId?: () => string\n  /**\n   * Custom headers to include in the requests.\n   */\n  headers?: Record<string, string>\n}\n\nexport function createOllama(\n  options: OllamaProviderSettings = {},\n): OllamaProvider {\n  const baseURL =\n    withoutTrailingSlash(options.baseURL) ?? 'http://127.0.0.1:11434/api'\n\n  const getHeaders = () => ({\n    ...options.headers,\n  })\n\n  const createChatModel = (\n    modelId: OllamaChatModelId,\n    settings: OllamaChatSettings = {},\n  ) =>\n    new OllamaChatLanguageModel(modelId, settings, {\n      baseURL,\n      fetch: options.fetch,\n      headers: getHeaders,\n      provider: 'ollama.chat',\n    })\n\n  const createEmbeddingModel = (\n    modelId: OllamaEmbeddingModelId,\n    settings: OllamaEmbeddingSettings = {},\n  ) =>\n    new OllamaEmbeddingModel(modelId, settings, {\n      baseURL,\n      fetch: options.fetch,\n      headers: getHeaders,\n      provider: 'ollama.embedding',\n    })\n\n  const provider = function (\n    modelId: OllamaChatModelId,\n    settings?: OllamaChatSettings,\n  ) {\n    if (new.target) {\n      throw new Error(\n        'The Ollama model function cannot be called with the new keyword.',\n      )\n    }\n\n    return createChatModel(modelId, settings)\n  }\n\n  provider.chat = createChatModel\n  provider.embedding = createEmbeddingModel\n  provider.languageModel = createChatModel\n  provider.textEmbedding = createEmbeddingModel\n  provider.textEmbeddingModel = createEmbeddingModel\n\n  return provider as OllamaProvider\n}\n\nexport const ollama = createOllama()\n", "import {\n  EmbeddingModelV1,\n  TooManyEmbeddingValuesForCallError,\n} from '@ai-sdk/provider'\nimport {\n  createJsonResponseHandler,\n  postJsonToApi,\n} from '@ai-sdk/provider-utils'\nimport { z } from 'zod'\n\nimport {\n  OllamaEmbeddingModelId,\n  OllamaEmbeddingSettings,\n} from '@/ollama-embedding-settings'\nimport { ollamaFailedResponseHandler } from '@/ollama-error'\n\ntype OllamaEmbeddingConfig = {\n  baseURL: string\n  fetch?: typeof fetch\n  headers: () => Record<string, string | undefined>\n  provider: string\n}\nexport class OllamaEmbeddingModel implements EmbeddingModelV1<string> {\n  readonly specificationVersion = 'v1'\n  readonly modelId: OllamaEmbeddingModelId\n\n  private readonly config: OllamaEmbeddingConfig\n  private readonly settings: OllamaEmbeddingSettings\n\n  get provider(): string {\n    return this.config.provider\n  }\n\n  get maxEmbeddingsPerCall(): number {\n    return this.settings.maxEmbeddingsPerCall ?? 2048\n  }\n\n  get supportsParallelCalls(): boolean {\n    return false\n  }\n\n  constructor(\n    modelId: OllamaEmbeddingModelId,\n    settings: OllamaEmbeddingSettings,\n    config: OllamaEmbeddingConfig,\n  ) {\n    this.modelId = modelId\n    this.settings = settings\n    this.config = config\n  }\n\n  async doEmbed({\n    abortSignal,\n    values,\n  }: Parameters<EmbeddingModelV1<string>['doEmbed']>[0]): Promise<\n    Awaited<ReturnType<EmbeddingModelV1<string>['doEmbed']>>\n  > {\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new TooManyEmbeddingValuesForCallError({\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        modelId: this.modelId,\n        provider: this.provider,\n        values,\n      })\n    }\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      abortSignal,\n      body: {\n        input: values,\n        model: this.modelId,\n      },\n      failedResponseHandler: ollamaFailedResponseHandler,\n      fetch: this.config.fetch,\n      headers: this.config.headers(),\n      successfulResponseHandler: createJsonResponseHandler(\n        ollamaTextEmbeddingResponseSchema,\n      ),\n      url: `${this.config.baseURL}/embed`,\n    })\n\n    return {\n      embeddings: response.embeddings,\n      rawResponse: { headers: responseHeaders },\n      usage: response.prompt_eval_count\n        ? { tokens: response.prompt_eval_count }\n        : undefined,\n    }\n  }\n}\n\nconst ollamaTextEmbeddingResponseSchema = z.object({\n  embeddings: z.array(z.array(z.number())),\n  prompt_eval_count: z.number().nullable(),\n})\n"],
  "mappings": "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",
  "names": ["import_dist", "require_dist", "import_dist", "exports", "e", "parse", "_a", "generateId", "z", "postJsonToApi", "createJsonResponseHandler", "withoutTrailingSlash"]
}
